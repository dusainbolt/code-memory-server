# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Blog {
  content: [BlogContent!]!
  createBy: String!
  createdAt: String!
  description: String!
  id: ID!
  slug: String!
  title: String!
  updatedAt: String!
}

type BlogContent {
  data: String!
  language: String!
  type: Float!
}

input BlogContentInput {
  data: String!
  language: String!
  type: Float!
}

input CreateBlogInput {
  content: [BlogContentInput!]!
  createBy: String!
  description: String!
  title: String!
}

input CreateProjectInput {
  descriptionEN: String!
  descriptionVN: String!
  endTime: String!
  name: String!
  nameEN: String!
  size: Int!
  startTime: String!
  status: ProjectStatus!
  techs: [String!]!
}

input CreateSeoHomeInput {
  description: String
  descriptionEN: String
  domain: String
  facebookChatPlugin: String
  image: SeoHomeImageInput!
  reason: String
  searchBoxUrl: String
  siteName: String
  social: SeoHomeSocialInput!
  title: String
  titleEN: String
}

input CreateTagInput {
  description: String!
  status: TagStatus!
  thumbnail: String!
  title: String!
}

input CreateUser {
  age: Float!
  avatar: String!
  email: String!
  firstName: String!
  gender: Float!
  items: [String!]!
  lastName: String!
  password: String!
}

input CreateWorkInput {
  descriptionEN: String!
  descriptionVN: String!
  endTime: String!
  nameEN: String!
  nameVN: String!
  position: String!
  startTime: String!
  status: WorkStatus!
  thumbnail: String!
  workType: WorkType!
}

input EntireTagInput {
  limit: Int = null
  status: [TagStatus!]!
}

input FindTagBySlugInput {
  slug: String!
}

"""The gender of user"""
enum Gender {
  FEMALE @deprecated(reason: "This is female")
  MALE @deprecated(reason: "This is male")
  OTHER @deprecated(reason: "This is ...")
}

type HistoryField {
  key: String
  newValue: String
  oldValue: String
}

input HistoryFieldInput {
  key: String
  newValue: String
  oldValue: String
}

input LoginInput {
  credential: String!
  password: String!
}

type LoginOutput {
  token: String!
  user: User!
}

type Mutation {
  blogCreate(input: CreateBlogInput!): Blog!
  projectCreate(input: CreateProjectInput!): Project!
  projectUpdate(input: UpdateProjectInput!): Project!
  seoHomeCreate(input: CreateSeoHomeInput!): SeoHome!
  tagCreate(input: CreateTagInput!): Tag!
  tagUpdate(input: UpdateTagInput!): Tag!
  userCreate(input: CreateUser!): User!
  userLogin(input: LoginInput!): LoginOutput!
  workCreate(input: CreateWorkInput!): Work!
  workUpdate(input: UpdateWorkInput!): Work!
}

type OutputSearchProject {
  dataProjects: [Project!]!
  total: Int!
}

type OutputSearchTag {
  dataTags: [Tag!]!
  total: Int!
}

type OutputSearchWork {
  dataWorks: [Work!]!
  total: Int!
}

type Project {
  createBy: String
  createdAt: String
  description: String
  descriptionEN: String
  endTime: String
  id: ID!
  name: String
  nameEN: String
  size: Float
  startTime: String
  status: ProjectStatus
  techs: [String!]!
  techsData: [Tag!]!
  updatedAt: String
  userCreate: User
}

"""The ProjectStatus."""
enum ProjectStatus {
  ACTIVE
  INACTIVE
}

type Query {
  initData: String!
  projectList(input: SearchProjectInput!): OutputSearchProject!
  seoHome: SeoHome!
  seoHomeEntire: [SeoHome!]!
  tagEntire(input: EntireTagInput!): [Tag!]!
  tagFindBySlug(input: FindTagBySlugInput!): Tag!
  tagList(input: SearchTagInput!): OutputSearchTag!
  workList(input: SearchWorkInput!): OutputSearchWork!
}

"""The role of user"""
enum Role {
  ADMIN
  CREATOR
  USER
}

input SearchProjectInput {
  key: String = null
  limit: Int = null
  offset: Int = null
  orderBy: String = ""
  sortBy: Int = null
  status: [ProjectStatus!]!
}

input SearchTagInput {
  key: String = null
  limit: Int = null
  offset: Int = null
  orderBy: String = ""
  sortBy: Int = null
  status: [TagStatus!]!
}

input SearchWorkInput {
  key: String = null
  limit: Int = null
  offset: Int = null
  orderBy: String = ""
  sortBy: Int = null
  status: [WorkStatus!]!
  type: [WorkType!]!
}

type SeoHome {
  createBy: String!
  createdAt: String!
  description: String
  descriptionEN: String
  domain: String
  facebookChatPlugin: String
  history: [HistoryField!]!
  id: ID!
  image: SeoHomeImage!
  reason: String
  searchBoxUrl: String
  siteName: String
  social: SeoHomeSocial!
  title: String
  titleEN: String
  userCreate: User
}

type SeoHomeImage {
  faviconUrlICO: String
  faviconUrlJPG: String
  logo400x400: String
  logo800x600: String
  logo1280x720: String
  logoAlt: String
  logoAltEN: String
}

input SeoHomeImageInput {
  faviconUrlICO: String
  faviconUrlJPG: String
  logo400x400: String
  logo800x600: String
  logo1280x720: String
  logoAlt: String
  logoAltEN: String
}

type SeoHomeSocial {
  facebookAppId: String
  facebookPageUrl: String
  twitterUrl: String
  youtubeUrl: String
}

input SeoHomeSocialInput {
  facebookAppId: String
  facebookPageUrl: String
  twitterUrl: String
  youtubeUrl: String
}

type Tag {
  createBy: String!
  createdAt: String!
  description: String!
  id: ID!
  slug: String!
  status: TagStatus!
  tagType: TagType!
  thumbnail: String!
  title: String!
  updatedAt: String!
  userCreate: User!
}

"""The TagStatus."""
enum TagStatus {
  ACTIVE
  HIDE
}

"""The TagType."""
enum TagType {
  ADDITION
  SYSTEM
}

input UpdateProjectInput {
  data: CreateProjectInput!
  projectId: String!
}

input UpdateTagInput {
  data: CreateTagInput!
  tagId: String!
}

input UpdateWorkInput {
  data: CreateWorkInput!
  workId: String!
}

type User {
  avatar: String!
  createdAt: String!
  email: String!
  facebook: String!
  firstName: String!
  gender: Gender!
  id: ID!
  lastName: String!
  password: String!
  phone: String!
  roles: [Role!]!
  status: UserStatus!
  updatedAt: String!
  username: String!
}

"""The status of user"""
enum UserStatus {
  ACTIVE @deprecated(reason: "This is active")
  BLOCK @deprecated(reason: "This is block")
  INACTIVE @deprecated(reason: "This is inactive")
  PAUSE @deprecated(reason: "This is pause")
}

type Work {
  createBy: String
  createdAt: String
  descriptionEN: String
  descriptionVN: String
  endTime: String
  id: ID!
  nameEN: String
  nameVN: String
  position: String
  startTime: String
  status: WorkStatus
  thumbnail: String
  updatedAt: String
  userCreate: User
  workType: WorkType
}

"""The WorkStatus."""
enum WorkStatus {
  ACTIVE
  INACTIVE
}

"""The WorkType."""
enum WorkType {
  CERTIFICATE
  LEARN
  WORK
}
